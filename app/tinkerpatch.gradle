//=======================Tinker 配置=======================================
android {
    dexOptions {
        // 开启支持大工程模式
        jumboMode = true
    }
}
/**
 * 获取版本名 用于提供tinkerId
 * @return
 */
def gitSha() {
    return android.defaultConfig.versionName
}

// 保存打包old apk 的地址，便于生成补丁包时的对比
def bakPath = file("${buildDir}/bakApk/")

ext {
    //是否打开tinker的功能。
    tinkerEnabled = true

    // old apk地址  基准apk包的路径，必须输入，否则会报错。
    // 要于bakApk路径下的名称一致。
    tinkerOldApkPath = "${bakPath}/app-debug.apk"
    //old apk 混淆文件地址  ，在打包差量包时要对应上。
    tinkerApplyMappingPath = "${bakPath}/app-release-16-13-mapping.txt"
    //old apk R 文件地址
    // E:\AndroidProjects\Tinker2\app\build\bakApk\app-debug-58-58-R.txt
    tinkerApplyResourcePath = "${bakPath}/app-debug-30-11-R.txt"
    /***
     * 1.通过flavor编译，这个时候我们可以看到bakApk路径是一个按照flavor名称区分的目录；
     2.将编译目录路径填写到sample中tinkerBuildFlavorDirectory，其他的几个字段不需要填写，这里会自动根据路径拼接;
     3.运行tinkerPatchAllFlavorDebug或者tinkerPatchAllFlavorRelease即可得到所有flavor的补丁包。
     */
    // 多渠道打包相关 only use for build all flavor, if not, just ignore this field
    //  tinkerBuildFlavorDirectory = "${bakPath}/app-1018-17-32-47"
}

/**
 * 若是在配置文件gradle.properties 中能找到OLD_APK对应的值，便使用该值。
 * @return
 */
def getOldApkPath() {
    return hasProperty("OLD_APK") ? OLD_APK : ext.tinkerOldApkPath
}

def getApplyMappingPath() {
    return hasProperty("APPLY_MAPPING") ? APPLY_MAPPING : ext.tinkerApplyMappingPath
}

def getApplyResourceMappingPath() {
    return hasProperty("APPLY_RESOURCE") ? APPLY_RESOURCE : ext.tinkerApplyResourcePath
}

def getTinkerIdValue() {
    return hasProperty("TINKER_ID") ? TINKER_ID : gitSha()
}

def buildWithTinker() {
    return hasProperty("TINKER_ENABLE") ? TINKER_ENABLE : ext.tinkerEnabled
}

def getTinkerBuildFlavorDirectory() {
    return ext.tinkerBuildFlavorDirectory
}

if (buildWithTinker()) {
    // 在tinker 模式下添加 tinker patch插件
    apply plugin: 'com.tencent.tinker.patch'
    /**
     * 全局信息相关的配置项
     */
    tinkerPatch {
        /**
         * necessary，default 'null'
         * the old apk path, use to diff with the new apk to build
         * add apk from the build/bakApk
         */
        oldApk = getOldApkPath()
        /**
         * newApk	选填，用于编译补丁apk路径。如果路径合法，即不再编译新的安装包，使用oldApk与newApk直接编译。
         */
        //newApk = getNewApkPath()
        /**
         * optional，default 'false'
         * there are some cases we may get some warnings
         * if ignoreWarning is true, we would just assert the patch process
         * case 1: minSdkVersion is below 14, but you are using dexMode with raw.
         *         it must be crash when load.
         * case 2: newly added Android Component in AndroidManifest.xml,
         *         it must be crash when load.
         * case 3: loader classes in dex.loader{} are not keep in the main dex,
         *         it must be let tinker not work.
         * case 4: loader classes in dex.loader{} changes,
         *         loader classes is ues to load patch dex. it is useless to change them.
         *         it won't crash, but these changes can't effect. you may ignore it
         * case 5: resources.arsc has changed, but we don't use applyResourceMapping to build
         */
        /**
         * 如果出现以下的情况，并且ignoreWarning为false，我们将中断编译。因为这些情况可能会导致编译出来的patch包带来风险：
         1. minSdkVersion小于14，但是dexMode的值为"raw";
         2. 新编译的安装包出现新增的四大组件(Activity, BroadcastReceiver...)；
         3. 定义在dex.loader用于加载补丁的类不在main dex中;
         4. 定义在dex.loader用于加载补丁的类出现修改；
         5. resources.arsc改变，但没有使用applyResourceMapping编译。
         */
        ignoreWarning = true

        /**
         * 保证签名的唯一性，在运行过程中，我们需要验证基准apk包与补丁包的签名是否一致，我们是否需要为你签名。
         */
        useSign = true

        /**
         * optional，default 'true'
         * whether use tinker to build
         */
        tinkerEnable = buildWithTinker()

        /**
         * 编译相关配置
         */
        buildConfig {

            /**
             * 新的apk使用旧的Map 文件，减少补丁包大小
             * 可选参数；
             * 在编译新的apk时候，我们希望通过保持旧apk的proguard混淆方式，
             * 从而减少补丁包的大小。
             * 这个只是推荐设置，不设置applyMapping也不会影响任何的assemble编译。
             */
            applyMapping = getApplyMappingPath()
            /**
             * 同上所述，相同的R文件，减少补丁包大小
             * 可选参数；
             * 在编译新的apk时候，
             * 我们希望通过旧apk的R.txt文件保持ResId的分配，
             * 这样不仅可以减少补丁包的大小，
             * 同时也避免由于ResId改变导致remote view异常。
             */
            applyResourceMapping = getApplyResourceMappingPath()

            /**
             * 在运行过程中，我们需要验证基准apk包的tinkerId
             * 是否等于补丁包的tinkerId。这个是决定补丁包能运行在哪些基准包上面，
             * 一般来说我们可以使用git版本号、versionName等等。
             */
            tinkerId = getTinkerIdValue()

            /**
             * 如果我们有多个dex,编译补丁时可能会由于类的移动导致变更增多。
             * 若打开keepDexApply模式，补丁包将根据基准包的类分布来编译。
             */
            keepDexApply = false

            /**
             * optional, default 'false'
             * Whether tinker should treat the base apk as the one being protected by app
             * protection tools.
             * If this attribute is true, the generated patch package will contain a
             * dex including all changed classes instead of any dexdiff patch-info files.
             *
             * 是否使用加固模式，仅仅将变更的类合成补丁。注意，这种模式仅仅可以用于加固应用中。
             */
            isProtectedApp = false

            /**
             * optional, default 'false'
             * Whether tinker should support component hotplug (add new component dynamically).
             * If this attribute is true, the component added in new apk will be available after
             * patch is successfully loaded. Otherwise an error would be announced when generating patch
             * on compile-time.
             *
             * <b>Notice that currently this feature is incubating and only support NON-EXPORTED Activity</b>

             是否支持新增非export的Activity（1.9.0之后版本）
             */
            supportHotplugComponent = false

        }

        dex {
            /**
             只能是'raw'或者'jar'。
             对于'raw'模式，我们将会保持输入dex的格式。
             对于'jar'模式，我们将会把输入dex重新压缩封装到jar。
             如果你的minSdkVersion小于14，你必须选择‘jar’模式，
             而且它更省存储空间，但是验证md5时比'raw'模式耗时。
             默认我们并不会去校验md5,一般情况下选择jar模式即可。
             */
            dexMode = "jar"

            /**
             * 需要处理dex路径
             * 需要处理dex路径，支持*、?通配符，必须使用'/'分割。
             * 路径是相对安装包的，例如assets/...
             */
            pattern = ["classes*.dex",
                       "assets/secondary-dex-?.jar"]
            /**
             * 这一项非常重要，它定义了哪些类在加载补丁包的时候会用到。这些类是通过Tinker无法修改的类，也是一定要放在main dex的类。
             这里需要定义的类有：
             1. 你自己定义的Application类；
             2. Tinker库中用于加载补丁包的部分类，即com.tencent.tinker.loader.*；
             3. 如果你自定义了TinkerLoader，需要将它以及它引用的所有类也加入loader中；
             4. 其他一些你不希望被更改的类，例如Sample中的BaseBuildInfo类。
             这里需要注意的是，这些类的直接引用类也需要加入到loader中。
             或者你需要将这个类变成非preverify。
             5. 使用1.7.6版本之后的gradle版本，参数1、2会自动填写。
             若使用newApk或者命令行版本编译，1、2依然需要手动填写
             */
            loader = [
                    //use sample, let BaseBuildInfo unchangeable with tinker
                    //"com.example.think.tinker2.app.BaseBuildInfo"

            ]
        }


        lib {
            pattern = ["lib/*/*.so", "src/main/jniLibs/*/*.so"]
            // 需要处理lib路径，支持*、?通配符，必须使用'/'分割。
            // 与dex.pattern一致, 路径是相对安装包的，例如assets/...
        }


        res {
            /**
             * 需要处理res路径，支持*、?通配符，必须使用'/'分割。与dex.pattern一致,
             * 路径是相对安装包的，例如assets/...，务必注意的是，
             * 只有满足pattern的资源才会放到合成后的资源包。
             */
            pattern = ["res/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]

            /**
             * 忽视改变的文件，即这些文件的改变不会被打到补丁包中
             *
             * 支持*、?通配符，必须使用'/'分割。
             * 若满足ignoreChange的pattern，在编译时会忽略该文件的新增、删除与修改。
             * 最极端的情况，ignoreChange与上面的pattern一致，即会完全忽略所有资源的修改。
             */
            ignoreChange = ["assets/sample_meta.txt"]

            /**
             * 对于修改的资源，如果大于largeModSize，
             * 我们将使用bsdiff算法。这可以降低补丁包的大小，但是会增加合成时的复杂度。默认大小为100kb
             */
            largeModSize = 100
        }

        packageConfig {  // 用于生成补丁包中的'package_meta.txt'文件
            /**
             * 在补丁包中 package_meta.txt文件中默认有TINKER_ID, NEW_TINKER_ID两个值
             * 默认我们自动从基准安装包与新安装包的Manifest中读取tinkerId,
             * 并自动写入configField。
             *
             * configField("key", "value"),
             *
             * 在这里，你可以定义其他的信息，
             * 在运行时可以通过TinkerLoadResult.getPackageConfigByName得到相应的数值。
             * 但是建议直接通过修改代码来实现，例如BuildConfig。
             */

            /**
             * 配置到清单文件的一些字段，没啥用 ，若添加，将会在package_meta.txt 文件中多出该信息。
             */
            //configField("platform", "all")

        }
        //or you can add config filed outside, or get meta value from old apk
        //project.tinkerPatch.packageConfig.configField("test1", project.tinkerPatch.packageConfig.getMetaDataFromOldApk("Test"))
        //project.tinkerPatch.packageConfig.configField("test2", "sample")

        /**
         * if you don't use zipArtifact or path, we just use 7za to try
         *
         * 7zip路径配置项，执行前提是useSign为true
         *
         * 有时会找不到 com.tencent.mm:SevenZip:1.1.10 路径，则在工程目录下的build.gradle文件中添加仓库依赖。
         * buildscript {
         *  repositories {
         *      google()
                jcenter()
                maven {url 'https://dl.bintray.com/jetbrains/anko'}}}*/
        sevenZip {
            /**
             * optional，default '7za'
             * the 7zip artifact path, it will use the right 7za with your platform
             *
             * 例如"com.tencent.mm:SevenZip:1.1.10"，将自动根据机器属性获得对应的7za运行文件，推荐使用。
             */
            zipArtifact = "com.tencent.mm:SevenZip:1.1.10"
            /**
             * optional，default '7za'
             * you can specify the 7za path yourself, it will overwrite the zipArtifact value
             *
             * 系统中的7za路径，例如"/usr/local/bin/7za"。
             * path设置会覆盖zipArtifact，若都不设置，将直接使用7za去尝试。
             */
//        path = "/usr/local/bin/7za"
        }
    }

    List<String> flavors = new ArrayList<>();
    project.android.productFlavors.each { flavor ->
        flavors.add(flavor.name)
    }
    boolean hasFlavors = flavors.size() > 0
    /**
     * bak apk and mapping
     */
    android.applicationVariants.all { variant ->
        /**
         * task type, you want to bak
         */
        def taskName = variant.name
        //def date = new Date().format("MMdd-HH-mm-ss")
        def date = new Date().format("mm-ss")

        tasks.all {
            if ("assemble${taskName.capitalize()}".equalsIgnoreCase(it.name)) {

                it.doLast {
                    copy {
                        def fileNamePrefix = "${project.name}-${variant.baseName}"
                        def newFileNamePrefix = hasFlavors ? "${fileNamePrefix}" : "${fileNamePrefix}-${date}"

                        def destPath = hasFlavors ? file("${bakPath}/${project.name}-${date}/${variant.flavorName}") : bakPath
//                        from variant.outputs.outputFile
                        into destPath
                        rename { String fileName ->
                            fileName.replace("${fileNamePrefix}.apk", "${newFileNamePrefix}.apk")
                        }

                        from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("mapping.txt", "${newFileNamePrefix}-mapping.txt")
                        }

                        from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("R.txt", "${newFileNamePrefix}-R.txt")
                        }
                    }
                }
            }
        }
    }
    project.afterEvaluate {
        //sample use for build all flavor for one time
        if (hasFlavors) {
            task(tinkerPatchAllFlavorRelease) {
                group = 'tinker'
                def originOldPath = getTinkerBuildFlavorDirectory()
                for (String flavor : flavors) {
                    def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Release")
                    dependsOn tinkerTask
                    def preAssembleTask = tasks.getByName("process${flavor.capitalize()}ReleaseManifest")
                    preAssembleTask.doFirst {
                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 15)
                        project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release.apk"
                        project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-mapping.txt"
                        project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-R.txt"

                    }

                }
            }

            task(tinkerPatchAllFlavorDebug) {
                group = 'tinker'
                def originOldPath = getTinkerBuildFlavorDirectory()
                for (String flavor : flavors) {
                    def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Debug")
                    dependsOn tinkerTask
                    def preAssembleTask = tasks.getByName("process${flavor.capitalize()}DebugManifest")
                    preAssembleTask.doFirst {
                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 13)
                        project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug.apk"
                        project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-mapping.txt"
                        project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-R.txt"
                    }

                }
            }
        }
    }

}
/***
 * 输出文件详解
 在tinkerPatch输出目录build/outputs/tinkerPatch中，我们关心的文件有：

 文件名	描述
 patch_unsigned.apk	没有签名的补丁包
 patch_signed.apk	签名后的补丁包
 patch_signed_7zip.apk	签名后并使用7zip压缩的补丁包，也是我们通常使用的补丁包。但正式发布的时候，最好不要以.apk结尾，防止被运营商挟持。
 log.txt	在编译补丁包过程的控制台日志
 dex_log.txt	在编译补丁包过程关于dex的日志
 so_log.txt	在编译补丁包过程关于lib的日志
 tinker_result	最终在补丁包的内容，包括diff的dex、lib以及assets下面的meta文件
 resources_out.zip	最终在手机上合成的全量资源apk，你可以在这里查看是否有文件遗漏
 tempPatchedDexes	在Dalvik与Art平台，最终在手机上合成的完整Dex，我们可以在这里查看dex合成的产物。
 */
//    aaptOptions{
//        cruncherEnabled false
//    }

//    //use to test flavors support
//    productFlavors {
//        flavor1 {
//            applicationId 'tinker.sample.android.flavor1'
//        }
//
//        flavor2 {
//            applicationId 'tinker.sample.android.flavor2'
//        }
//    }